// 属性値の型
%semantic double

%token NUMBER EOL
%left  '+' '-'
%left  '*' '/'

%%
   /* 文法記述とそれに対する動作（還元時に実行されるプログラム） */
   /* 通常の BNFの → の代わりに : を書く。各BNFは ; で区切る。 */
   /* 最初に start symbolを書く */
input :   /* 空 */
      | input line EOL    {}
      ;

   /* $$は左辺の属性値、$nは右辺の n番目の文法要素の属性値を表す。 */
line  :  /* 空 */     { System.exit(0); }
      |  expr         { System.out.printf("%g%n", $1); }
      ;

expr  : expr '+' expr	{ $$ = $1 + $3; }
      | expr '-' expr	{ $$ = $1 - $3; }
      | expr '*' expr	{ $$ = $1 * $3; }
      | expr '/' expr	{ $$ = $1 / $3; }
      | '(' expr ')'    { $$ = $2; }
      | NUMBER          { $$ = $1; }
      ;

%%

  /* フィールドやメソッドの定義 */

  CalcParser(CalcLexer l) {
      lexer = l;  
  }
  
  private CalcLexer lexer;

  private void yyerror(String msg) {
      System.out.println("エラー: " + msg);
      System.exit(1);
  }

  public static void main(String[] args) {
      CalcLexer lexer = new CalcLexer(System.in);
      CalcParser calc = new CalcParser(lexer);
      lexer.nextToken();    
      calc.parse();    // parse the input
  }