%{
package furuw;
import java.util.*;
import furuw.ast.*;
%}
// 属性値の型
%semantic ASTNode

%token NUMBER EOL STRING IDENTIFIER EOF
%token GE LE EQ NE AND OR
%token IF WHILE
%left  OR
%left  AND
%right '='
%left  '|'
%left  '^'
%left  '&'
%nonassoc  EQ NE
%nonassoc  '>' '<' GE LE
%left  '+' '-'
%left  '*' '/' '%'

%%
   /* 文法記述とそれに対する動作（還元時に実行されるプログラム） */
   /* 通常の BNFの → の代わりに : を書く。各BNFは ; で区切る。 */
   /* 最初に start symbolを書く */

program	:
		| program statement ';'	{ System.out.println("=> " + $2.eval(varl)); }
		| program statement EOL	{ System.out.println("=> " + $2.eval(varl)); }
		| program ';'
		| program EOL
		| program EOF	{ System.exit(0); }
		;

primary	: '(' expr ')'	{ $$ = $2; }
		| IDENTIFIER	{ $$ = $1; }
		| NUMBER	{ $$ = $1; }
		| STRING	{ $$ = $1; }
		;

factor	: '-' primary	{ $$ = new NegativeExpr( new ArrayList<ASTNode>(){{ add($2); }} ); }
		| primary	{ $$ = $1; }
		;


expr	: factor	{ $$ = $1; }
		| expr '=' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr EQ  expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr NE  expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr GE  expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr LE  expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr '>' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr '<' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr '+' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr '-' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr '*' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr '/' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		| expr '%' expr	{ $$ = new BinaryExpr( new ArrayList<ASTNode>(){{ add($1); add($2); add($3); }} ); }
		;

block	: '{' block_stmt '}'	{ $$ = $2; }
	  	;

block_stmt	:	{ $$ = new BlockStmt(new ArrayList<ASTNode>(0)); }
			| statement ';' block_stmt		{ $$ = new BlockStmt(new ArrayList<ASTNode>(){{ add($1); addAll($3.getChildren()); }} ); }
			| statement EOL block_stmt		{ $$ = new BlockStmt(new ArrayList<ASTNode>(){{ add($1); addAll($3.getChildren()); }} ); }
			| ';' block_stmt	{ $$ = $2; }
			| EOL block_stmt	{ $$ = $2; }
			;

simple	: expr	{ $$ = $1; }
		;

statement	: IF expr block		{ $$ = new IfStmt( new ArrayList<ASTNode>(){{ add($2); add($3); }} ); }
			| WHILE expr block		{ $$ = new WhileStmt( new ArrayList<ASTNode>(){{ add($2); add($3); }} ); }
			| simple			{ $$ = $1; }
			;

%%

  /* フィールドやメソッドの定義 */

  furuwParser(Lexer l) {
      lexer = l;
      varl = new VariableList();
  }

  private VariableList varl;
  private Lexer lexer;

  private void yyerror(String msg) {
      System.out.println("エラー: " + msg);
      System.exit(1);
  }

  public static void main(String[] args) {
      Lexer lexer = new Lexer(System.in);
      furuwParser parser = new furuwParser(lexer);
      lexer.nextToken();
      parser.parse();    // parse the input
  }